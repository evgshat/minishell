termcap - библиотека и база данных, используемая на Unix-подобных операционных системах.
Она позволяет программам использовать дисплей компьютерного терминала аппаратно-независимо, что очень упрощает процесс
написания переносимых текстовых приложений

У терминала есть набор атрибутов, которые можно получить и поменять.
Лучше использовать нижеописанные функции в паре, сохраняя структуру termios при измнении параметров,
а потом восстанавливать в конце работы программы, чтобы не создавать неожиданностей для тех, кто запустил программу.
tcgetattr
int tcgetattr(int fd, struct termios *termios_p); // выдает аттрибуты терминала и записывает их значения в поле termios_p
int tcsetattr(int fd, int optional_actions, struct termios *termios_p);
библиотеки:
	#include <termios.h>
	#include <unistd.h>
Функции termios описывают общий терминальный интерфейс, гарантирующий управление асинхронным коммуникационным портом. (usb-портом)
Параметр termios_p указывает на структуру termios_p
tcflag_t c_iflag; // режимы ввода
tcflag_t c_oflagж // режимы выодв
tcflag_t c_iflag; // режимы управления
tcflag_t с_lflagж // режимы локали
cc_t     с_сс     // управляющие символы

Первые четыре поля - это битовые маски, константы, их список можно найти в интернете.
Поле с_сс определяет особые сиволы, обрабатываемые терминалом.

переменная optional_actions - указыает, как поступать с вводом и вывоводом, уже поставленным в очередь, есть свои константы, подробнее тут (это для tcsetattr):
http://rus-linux.net/nlib.php?name=/MyLDP/BOOKS/Linux-tools/10/ltfwp-10-22.html

Во время ввода, терминал может работать в двух режимах: в каноническом (canonical mode) и некононическом (noncanonical mode) режимах.

В каноническом режиме ввода драйвер буферезирует пользовательский ввод до перевода строки (то есть пока пользоатель не нажал enter). После этого, программе вызвавшей read() для стандартного ввода вернется целая строка,
завершенная символом перевода строки. В случае, если было запрошено меньше байт, чем пользователь ввел при наборе строки, то остаток можно будет считать при следующем вызове read()

В неканоническом режиме ввод происходит посимвольно, а не построчно. Это необходимо программам с более сложным CLI, чем просто читающим строки.
К примеру, работая в таком режиме, bash получает возможность обработать нажатие TAB и попытаться произвести автодополнение, чтобы было бы невозможно,
ожидай он целой строки.

В каноническом режиме драйвер терминала обрабатывает множество специальных символов, таких ^C (Control-C), ^S, ^Q, ^Z и другие.
Данная функциональность может быть отключена при переводе драйвера в неканонический режим.

Ссылка: https://www.tune-it.ru/web/kk/home/-/blogs/4641543

По поводу очередей. В драйвере терминала есть две очереди - вводимых символов и выводимых символов.
Соответственно, когда процесс выводит что-то на терминал, его вывод попадает в очередь вывода,
а когда пользователь что-то печатает в терминале, его ввод попадает в очередь ввода.

GUI - Graphical User Interface - приложением или графическим приложением называют практически любую программу, управление которой осуществляется посредством мыши, тачпада или сенсорного экрана.
CLI - Command Line Interface - это программа в командной строке, которая читает вводимые команды и выполняет запрошенные действия. Любая программа, которой можно пользовать через команды из терминала, попадают в эту категорию.
TUI - Text User Interface - текстовый пользовательский интерфейс. Это наполовину CLI и наполовину GUI.

Экранирование символов - замена в тексте управляющих символов на соответствующие текстовые подстановки. Один из вилов управляющих последовательнотей.

Кавычки, ограничивающие строки с обеих сторон, служат для предотвращения интерпретации специальных символов, которые могут находиться в строке.
(Символ называется "специальным", если он несет дополнительную смысловую нагрузку)

ДВОЙНЫЕ КАВЫЧКИ
Желательно использовать двойные кавычки (" ") при обращении к переменным. Это предотвратит интерпретацию специальных символов, которые могут содержаться в именах переменных,
за исключением $,` (обратная кавычка) и \ (escape -- обратный слэш).
То, что символ $ попал в разряд исключений, позволяет выполнять обращение к переменным внутри строк, ограниченным двойными кавычками, т.е. выполнять подстановку значений переменных.
Двойные кавычки мб использованы для предотвращения разбиения строки на слова. Заключение строки в кавычки приводит к тому, что она передается как один аргумент, даже если она содержит пробельные символы - разделители.
Заключение в кавычки аргументов команды echo необходимо только в том случае, когда разбиение на отдельные слова сопряжено с определенными трудностями.

ОДИНАРНЫЕ КАВЫЧКИ (' ') схожи по своему действию с двойными кавычками, только не допускают обращения к переменным, посколько специальный символ "$" внутри одинарных кавычек воспринимается как обычный символ.
Внутри одиночных кавычек, любой специальный символ, за исключением ', интерпретируется как простой сивол.

Когда оболочка обнаруживает первую открывающу одинарную кавычку, она игнорирует любые последующие специальные символы до тех пор, пока не обнаружит вторую закрывающую кавычку

СЛЭШ
Экранирующий (escape) символ (\) сообщает интерпретатору, что следующий за ним символ должен восприниматься как обычный символ (??)
Так жеслэш перед символом равнозначен заключению этого символа в одиночные кавычки

Некоторые экранированные символы - \n, \r, \t, \b, \a ("звонок", сигнал), \0xx

Обратный слэш. echo "\\" выведет \

\$ символ доллара (если за комбинацией символов \$ следует имя перемнной, то она не будет разыменована)
echo "\$variable01" выведет $variable01

\"
echo "Привет" #(выведет) Привет
echo \"Привет\"." # "Привет"

Поведение сивола \ сильно зависит от того, экранирован ли он, ограничен ли кавычками или находится внутри конструкции подстановки команды или во вложенной документе
тут примеры - https://www.opennet.ru/docs/RUS/bash_scripting_guide/c1833.html

ТОЧКА с ЗАПЯТОЙ

Оболочка может выполнить сразу несколько команд, есть написать их через точку с запятой